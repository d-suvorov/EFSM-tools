% MZN file model for EFSM induction
% Author: Vladimir Ulyantsev (ulyantsev@rain.ifmo.ru)

% given constants and domains

int: C; % inducted machine size
int: V; % scenarios tree size
int: E; % events (with expressions) count
int: A; % actions count
int: AE; % consistency graph edges count (adjacent edges)

set of int: colors = 0..C-1;
set of int: vertices = 0..V-1;
set of int: apta_edges = 1..V-1;
set of int: adjacent_edges = 1..AE;
set of int: events = 0..E-1;
set of int: actions = 0..A-1;


%% given data

array [apta_edges] of int: tree_event;
array [apta_edges] of int: tree_action;
array [apta_edges] of int: tree_parent;

array [adjacent_edges] of int: edge_src;
array [adjacent_edges] of int: edge_dst;

% String representation of events and actions
array [events] of string: event_str;
array [actions] of string: action_str;


%% variables

array [vertices] of var colors: x; % vertices colors
array [colors, events] of var colors: y; % EFSM transitions destinations
array [colors, colors] of var bool: tr;
array [1..C-1] of var colors: p; 


%% constraints

% start vertex corresponds to start state
constraint x[0] = 0;

% adjacent graph constraints
constraint forall (i in adjacent_edges) (
    x[edge_src[i]] != x[edge_dst[i]]
);

% transitions constraints
constraint forall (i in apta_edges) (
    y[x[tree_parent[i]], tree_event[i]] = x[i]
);

% redundant constraints to unify y variables
% used to find all solutions
constraint forall (c in colors, e in events) (
    (not exists (i in apta_edges) (tree_event[i] == e /\ x[tree_parent[i]] == c)) -> y[c, e] = c
);

constraint forall (i in colors, j in colors) (
    if i >= j then
        tr[i, j] = false
    else
        tr[i, j] = exists (e in events) (y[i, e] = j)
    endif
);

constraint forall (i in 1..C-1, j in colors where j < i) (
    (p[i] = j) <-> (tr[j, i] /\ forall (k in 0..j-1) (not tr[k, i]))
);

constraint forall (i in colors, j in colors, e in events where j > i) (
    
);



solve satisfy;


% I have no idea, why do I have to add " + 1" in event_str[e + 1] and action_str[a + 1]

output ["# Colors = ", show(x), "\n",
        "digraph Automaton {\n",
        "    node [shape = circle];\n",
        "    0 [style = \"bold\"];\n"] ++
        
        [show(exists (i in apta_edges) (tree_event[i] == e /\ 
                                        tree_action[i] == a /\ 
                                        x[tree_parent[i]] == c1 /\
                                        x[i] == c2)) ++ 
         "    " ++ show(c1) ++ " -> " ++ show(c2) ++ 
         " [label = \" " ++ show(event_str[e + 1]) ++ " (" ++  show(action_str[a + 1]) ++ ") \"];\n" 
         | c1 in colors, c2 in colors, e in events, a in actions] ++

        ["}"];
