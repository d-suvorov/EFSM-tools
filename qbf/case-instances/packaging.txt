## Product Packaging - Once the photoelectric sensor detects 10 products, the robotic arm will begin to pack up.
## When the action is completed, the robotic arm and the counter will be reset.
## Success with unroll 3

## Here we use three variables to encode the counter c1
## (c1_add1 for add 1, c1_geq10 for checking if it reaches 10, c1_reset for reset of counter)

## Here one tricky thing is that detecting an object imples that we see a !x0 --- x0 --- !x0 form.
## Therefore, we should use falling edge or raising edge. But when we use falling edge, 
## it is hard to synthesize assumption

ALWAYS ((!x0 && NEXT x0) -> NEXT c1_add1)
ALWAYS (!(!x0 && NEXT x0) -> !NEXT c1_add1)

ALWAYS (c1_geq10 -> (y0 UNTIL x1))

## Reset the counter at raising edge
ALWAYS ((!x1 && NEXT x1) -> NEXT (c1_reset))
ALWAYS (NEXT (c1_reset) -> (!x1 && NEXT x1))

ALWAYS ((!x1 && NEXT x1) -> NEXT ((!y0 UNTIL c1_geq10) || (ALWAYS !c1_geq10)))

ASSUME [] ( <> (x1))

## Reset and add can not appear simultaneously
ALWAYS (!(c1_reset && c1_add1))

## Assumption to state that two things does not happen 
## (this is not very practical, but the mechanism is not complete, e.g., one can not control the conveyor belt)
ASSUME [] (x0 -> !x1)




INPUT x0, x1, c1_geq10
OUTPUT y0, c1_reset, c1_add1
TIMER 
